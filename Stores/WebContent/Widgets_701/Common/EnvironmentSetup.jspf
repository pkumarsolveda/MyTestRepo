<%--
 =================================================================
  Licensed Materials - Property of IBM

  WebSphere Commerce

  (C) Copyright IBM Corp. 2011, 2015 All Rights Reserved.

  US Government Users Restricted Rights - Use, duplication or
  disclosure restricted by GSA ADP Schedule Contract with
  IBM Corp.
 =================================================================
--%>

<%-- 
  *****
  * This file retrieves and prepares a lot of information which are used by all the store JSP files.
  * 
  *****
--%>

<%@page import="com.ibm.commerce.context.ExternalCartContext"%>
<%@ include file="../Common/JSTLEnvironmentSetup.jspf" %>
<%@ page import="com.ibm.commerce.foundation.internal.server.services.search.config.solr.SolrSearchConfigurationRegistry"%>
<%@ page import="com.ibm.commerce.command.CommandContext" %>
<%@ page import="com.ibm.commerce.context.preview.PreviewContext" %>
<%@ page import="com.ibm.commerce.server.WcsApp" %>
<%@ page import="com.ibm.commerce.server.WebModuleConfig" %>
<%@page import="com.ibm.commerce.foundation.internal.server.services.registry.StoreConfigurationRegistry"%>
<%@page import="com.ibm.commerce.registry.RegistryManager"%>

<%-- This flow tag is used to change styles --%>
<flow:fileRef id="vfileColor" fileId="vfile.color"/>
<flow:fileRef id="StyleDir" fileId="StyleDir"/>

<flow:fileRef id="vfileStylesheet" fileId="vfile.stylesheet"/>
<c:set var = "env_vfileColor" value="${vfileColor}"/>
<c:set var = "env_StyleDir" value="${StyleDir}"/>
<c:set var = "env_vfileStylesheet" value="${vfileStylesheet}"/>
<c:set var="env_escapeXmlFlag" value="true"/>

<%-- These are variables to use on pages --%>
<%
	StoreConfigurationRegistry defRegistryVal = (StoreConfigurationRegistry) RegistryManager.singleton().getRegistry("StoreConfigurationRegistry");
	String defStoreId = StoreConfigurationRegistry.getSingleton().getValue(0, "DMart.Default.StoreId");
	pageContext.setAttribute("defStoreId", defStoreId);
	String defLangId = StoreConfigurationRegistry.getSingleton().getValue(0, "DMart.Default.LangId");
	pageContext.setAttribute("defLangId", defLangId);
	String defCatalogId = StoreConfigurationRegistry.getSingleton().getValue(0, "DMart.Default.CatalogId");
	pageContext.setAttribute("defCatalogId", defCatalogId);	
	String defPinCode = StoreConfigurationRegistry.getSingleton().getValue(0, "DMart.Default.PinCode");
	pageContext.setAttribute("defPinCode", defPinCode);

%>
<script>
	var defPinCode = "<c:out value="${defPinCode}"/>";
</script>

<c:set var="storeIdTemp" value = "${CommandContext.storeId}" />
<c:if test="${empty storeIdTemp}">
	<c:set var="storeIdTemp" value = "${defStoreId}" />
</c:if>
<c:set var="catalogIdTemp" value =  "${defCatalogId}" />
<c:set var="langIdTemp" value = "${defLangId}" />
<input type='hidden' value='${storeIdTemp}' id='storeIdTemp'>
<c:if test="${empty WCParam}">
	<c:set target="${WCParam}" property="storeId" value="${storeIdTemp}"  />
	<c:set var="storeId" value = "${storeIdTemp}" />
	<c:set target="${WCParam}" property="catalogId" value="${catalogIdTemp}"  />
	<c:set var="catalogId" value = "${catalogIdTemp}" />
	<c:set target="${WCParam}" property="langId" value="${langIdTemp}"  />
	<c:set var="langId" value = "${langIdTemp}" />
</c:if>
<c:set var="locale" value="${CommandContext.locale}" />
<c:set var="langId" value="${CommandContext.languageId}" />
<c:set var="storeId" value="${CommandContext.storeId}" />

<c:if test="${empty userType}">
	<c:set var="userType" value="${CommandContext.user.registerType}" scope="request"/>
</c:if>
<c:set var="userId" value="${CommandContext.userId}"/>
<c:set var="userLogonState" value="0"/>
<c:if test="${userType ne 'G'}">
  <c:set var="userLogonState" value="1"/>
</c:if>
<c:set var="anonymousUser" value="false" scope="request"/>
<c:if test="${CommandContext.user.userId eq '-1002'}">
	<c:set var="anonymousUser" value="true" scope="request"/>
</c:if>
<c:set var="langId" value="${CommandContext.languageId}" scope="request" />

<c:if test="${!empty WCParam.catalogId}">
	<c:set var="catalogId"><c:out value="${WCParam.catalogId}"/></c:set>
</c:if>
<c:set var="urlLangId" value="${langId}" scope="request"/>

<%-- Determine if we are in preview mode. --%>
<wcst:preview var="env_inPreview" />
<%
	//Port changes for SOLR in secure pages
	StoreConfigurationRegistry storecnfRegistry = (StoreConfigurationRegistry) RegistryManager.singleton().getRegistry("StoreConfigurationRegistry");
	String SOLRSecurePort = storecnfRegistry.getSingleton().getValue(0, "DMart.SOLR.securehost");
	//Port changes for SOLR in secure pages
	if (request.getAttribute("searchHostNamePath") == null) {
		Boolean inPreview = (Boolean) request.getAttribute("env_inPreview");
		SolrSearchConfigurationRegistry env_SolrSearchConfigurationRegistry = SolrSearchConfigurationRegistry.getInstance();
		String hostname = env_SolrSearchConfigurationRegistry.getSearchServerHostname();
		if (inPreview != null && inPreview) {
			// In preview mode
			request.setAttribute("searchHostNamePath", "https://" + hostname + ":" + env_SolrSearchConfigurationRegistry.getSearchServerPreviewSecuredPort());
			//Port changes for SOLR in secure pages
			request.setAttribute("searchSecureHostNamePath", "https://" + hostname + ":" + SOLRSecurePort);
			request.setAttribute("searchContextPath", env_SolrSearchConfigurationRegistry.getSearchServerPreviewContextPath());
		} else {
			// Non preview mode
			request.setAttribute("searchHostNamePath", "http://" + hostname + ":" + env_SolrSearchConfigurationRegistry.getSearchServerPort());
			//Port changes for SOLR in secure pages
			request.setAttribute("searchSecureHostNamePath", "https://" + hostname + ":" + SOLRSecurePort);
			request.setAttribute("searchContextPath", env_SolrSearchConfigurationRegistry.getSearchServerContextPath());
		}
	}
%>

<c:if test="${empty REST_CONFIG}">
	<jsp:useBean id="REST_CONFIG" class="java.util.HashMap" scope="request"/>
	<c:choose>
		<c:when test="${pageContext.request.secure}">
			<c:choose>
				<c:when test="${env_inPreview}">
					<c:if test="${empty secureRestPreviewConfig}">
						<jsp:useBean id="secureRestPreviewConfig" class="java.util.HashMap" scope="request"/>
						<c:set target="${secureRestPreviewConfig}" property="schema" value="https"/>
						<c:set target="${secureRestPreviewConfig}" property="host" value="${pageContext.request.serverName}"/>
						<%
							WebModuleConfig webModuleConfig = WcsApp.configProperties.getWebModule("RestPreview");
							secureRestPreviewConfig.put("port", webModuleConfig.getSSLPort());
							secureRestPreviewConfig.put("contextPath", webModuleConfig.getContextPath());
						%>
					</c:if>
					<c:set target="${REST_CONFIG}" property="${storeId}" value="${secureRestPreviewConfig}"/>
				</c:when>
				<c:otherwise>
					<c:if test="${empty secureRestConfig}">
						<jsp:useBean id="secureRestConfig" class="java.util.HashMap" scope="request"/>
						<c:set target="${secureRestConfig}" property="schema" value="https"/>
						<c:set target="${secureRestConfig}" property="host" value="${pageContext.request.serverName}"/>
						<%
							WebModuleConfig webModuleConfig = WcsApp.configProperties.getWebModule("Rest");
							secureRestConfig.put("port", webModuleConfig.getSSLPort());
							secureRestConfig.put("contextPath", webModuleConfig.getContextPath());
						%>
					</c:if>
					<c:set target="${REST_CONFIG}" property="${storeId}" value="${secureRestConfig}"/>
				</c:otherwise>
			</c:choose>
		</c:when>
		<c:otherwise>
			<c:choose>
				<c:when test="${env_inPreview}">
					<c:if test="${empty restPreviewConfig}">
						<jsp:useBean id="restPreviewConfig" class="java.util.HashMap" scope="request"/>
						<c:set target="${restPreviewConfig}" property="schema" value="http"/>
						<c:set target="${restPreviewConfig}" property="host" value="${pageContext.request.serverName}"/>
						<%
							WebModuleConfig webModuleConfig = WcsApp.configProperties.getWebModule("RestPreview");
							restPreviewConfig.put("port", webModuleConfig.getNonSSLPort());
							restPreviewConfig.put("contextPath", webModuleConfig.getContextPath());
						%>
					</c:if>
					<c:set target="${REST_CONFIG}" property="${storeId}" value="${restPreviewConfig}"/>
				</c:when>
				<c:otherwise>
					<c:if test="${empty restConfig}">
						<jsp:useBean id="restConfig" class="java.util.HashMap" scope="request"/>
						<c:set target="${restConfig}" property="schema" value="http"/>
						<c:set target="${restConfig}" property="host" value="${pageContext.request.serverName}"/>
						<%
							WebModuleConfig webModuleConfig = WcsApp.configProperties.getWebModule("Rest");
							restConfig.put("port", webModuleConfig.getNonSSLPort());
							restConfig.put("contextPath", webModuleConfig.getContextPath());
						%>
					</c:if>
					<c:set target="${REST_CONFIG}" property="${storeId}" value="${restConfig}"/>
				</c:otherwise>
			</c:choose>
		</c:otherwise>
	</c:choose>
</c:if>

<wcf:useBean var="cachedCatalogEntryDetailsMap" classname="java.util.HashMap" scope="request"/>
<wcf:useBean var="cachedEntitledPriceMap" classname="java.util.HashMap" scope="request"/>
<wcf:useBean var="cachedRangePriceMap" classname="java.util.HashMap" scope="request"/>
<wcf:useBean var="cachedCategoryViewMap" classname="java.util.HashMap" scope="request"/>
<wcf:useBean var="cachedOnlineStoreMap" classname="java.util.HashMap" scope="request"/>

<c:set var="key1" value="store/${storeId}/databean+IBM_Store_Details+${langId}+${jspStoreDir}"/>
<c:set var="sdb" value="${cachedOnlineStoreMap[key1]}"/>
<c:if test="${empty sdb}">
	<wcf:rest var="sdb" url="store/{storeId}/databean" cached="true">
		<wcf:var name="storeId" value="${storeId}" encode="true"/>
		<wcf:param name="profileName" value="IBM_Store_Details" encode="true"/>
		<wcf:param name="langId" value="${langId}" encode="true"/>
		<wcf:param name="jspStoreDir" value="${jspStoreDir}" encode="true" />
	</wcf:rest>
	<wcf:set target = "${cachedOnlineStoreMap}" key="${key1}" value="${sdb}"/>
</c:if>

<%-- Determine whether store is B2B store type --%>
<c:if test="${sdb.storeType == 'B2B' || sdb.storeType == 'BMH'}" >
	<c:set var="env_b2bStore" value="true"/>
</c:if>

<c:set var="env_OnBehalfOf" value="false"/>
<c:set var="env_useExternalCart" value="false"/>
<c:set var="env_browseOnly" value="false"/>
<flow:ifEnabled feature="on-behalf-of">
	<% 
		if (request.getAttribute(ExternalCartContext.KEY_EXTERNAL_CART_ID) == null) {
			CommandContext commandContext = (CommandContext) request.getAttribute("CommandContext");
			ExternalCartContext context = (ExternalCartContext) commandContext.getContext(ExternalCartContext.CONTEXT_NAME);
			if(context != null){
				request.setAttribute(ExternalCartContext.KEY_EXTERNAL_CART_ID, context.getAttribute(ExternalCartContext.KEY_EXTERNAL_CART_ID));
				
				String browseOnlyMode = context.getAttribute(ExternalCartContext.KEY_BROWSE_ONLY);
				if (browseOnlyMode != null && browseOnlyMode.compareToIgnoreCase("true")==0){
					request.setAttribute(ExternalCartContext.KEY_BROWSE_ONLY, "true");
				}
			}
		}
	%>
	<c:if test="${CommandContext.forUserId != '' && CommandContext.stickyUserId == ''}">
		<c:set var="env_OnBehalfOf" value="true"/>	
		<c:if test="${!empty extCartId }">
			<c:set var="env_useExternalCart" value="true"/>
		</c:if>	
		<c:if test="${!empty browseOnly }">
			<c:set var="env_browseOnly" value="true"/>
		</c:if>	
	</c:if>	
</flow:ifEnabled>

<%-- Enable to allow selection of skus/attributes which are set to be buyable=false at widget level default value is false --%>
<c:set var="buyablePurchasable" value="false" scope="request" />
<%--
	For CaaS, prefix the path of jspStoreImgDir and jsAssetsDir, so that it points to webserver. OOB it will be empty
--%>
<c:set var = "jsServerPath" value=""/>
<c:set var = "cssServerPath" value=""/>

<%-- URL pointing to the shared image directory.  Use this to reference images --%>
<c:choose>
<c:when test="${not empty param.ajaxStoreImageDir }" >
	<c:set var="jspStoreImgDir"><c:out value="${param.ajaxStoreImageDir}"/> </c:set>
</c:when>
<c:otherwise>
	<c:set var="jspStoreImgDir" value="${jsServerPath}${sdb.jspStoreDirFilePath}" />
</c:otherwise>
</c:choose>

<%-- WebAsset directory of the shared file directory.  Includes JSPs, HTML, Image files, etc --%>
<c:set var="env_jspStoreDir" value="/${sdb.jspStoreDir}/" />

<%-- Path used to retrieve the JavaScript assets.  Use this to reference your JavaScript files. --%>
<c:set var="jsAssetsDir" value="${cssServerPath}${sdb.jspStoreDirFilePath}" />

<%-- Path to Commerce Composer site level widgets. --%>
<c:set var="env_siteWidgetsDir" value="/Widgets_701/" scope="request" />

<%--
Example directories:
storeImgDir - /wcsstore/<hostedstoredir>/
storeDir - /<hostedstoredir>/
jspStoreImgDir - /wcsstore/<sharedstorefrontassetstoredir>/ 
jspStoreDir - /<sharedstorefrontassetstoredir>/ 
--%>

<c:set var="key1" value="store/${storeId}/currency_format+byCurrency+${CommandContext.currency}+-1+${langId}"/>
<c:set var="currencyFormatterDB" value="${cachedOnlineStoreMap[key1]}"/>
<c:if test="${empty currencyFormatterDB}">
	<wcf:rest var="getCurrencyFormatResponse" url="store/{storeId}/currency_format" cached="true">
		<wcf:var name="storeId" value="${storeId}" />
		<wcf:param name="q" value="byCurrency" />
		<wcf:param name="currency" value="${CommandContext.currency}" />
		<wcf:param name="numberUsage" value="-1" />
		<wcf:param name="langId" value="${langId}" />
	</wcf:rest>
	<c:set var="currencyFormatterDB" value="${getCurrencyFormatResponse.resultList[0]}" scope="request" />
	<wcf:set target = "${cachedOnlineStoreMap}" key="${key1}" value="${currencyFormatterDB}"/>
</c:if>

<%-- Set to context root where images can be found --%>
<c:set var="env_imageContextPath" value="${staticAssetContextRoot}" /> 

<c:choose>
	<c:when test="${CommandContext.locale eq 'iw_IL'}">
		<c:set var="isBiDiLocale" value="true" scope="request"/>
		<c:set var="shortLocale" value="he"/>
	</c:when>
	<c:when test="${CommandContext.locale eq 'ar_EG'}">
		<c:set var="isBiDiLocale" value="true" scope="request"/>
		<c:set var="shortLocale" value="${fn:substring(CommandContext.locale,0,2)}"/>
	</c:when>
	<c:otherwise>
		<c:set var="shortLocale" value="${fn:substring(CommandContext.locale,0,2)}"/>
		<c:set var="isBiDiLocale" value="false" scope="request"/>
	</c:otherwise>
</c:choose>

<c:set var="env_currencyDecimal" value="${currencyFormatterDB.decimalPlaces}" />
<c:set var="env_currencyCode" value="${currencyFormatterDB.currencyCode}" />

<c:if test="${CommandContext.currency == 'KRW'}">
	<c:set property="currencySymbol" value='&#8361;' target="${currencyFormatterDB}"/>
</c:if>
<c:if test="${CommandContext.currency == 'PLN'}">
	<c:set property="currencySymbol" value='z&#322;' target="${currencyFormatterDB}"/>
</c:if>
<c:if test="${CommandContext.currency == 'TRY'}">
	<%-- No longer necessary when Turkish Lira is displayable through Unicode --%>
	<c:set property="currencySymbol" value="<IMG src='${env_imageContextPath}/images/turkish_lira.gif' align='bottom'>" target="${currencyFormatterDB}"/>
</c:if>
<c:if test="${CommandContext.currency == 'EGP' && locale != 'iw_IL'}">
	<c:set property="currencySymbol" value="<SPAN dir=ltr> .&#1580;.&#1605;</SPAN>" target="${currencyFormatterDB}"/>	
</c:if>
<c:if test="${CommandContext.currency == 'ILS' && locale == 'iw_IL'}">
	<c:set property="currencySymbol" value="&#1513;&#1524;&#1495;" target="${currencyFormatterDB}"/>
</c:if>

<c:set var="env_CurrencySymbolToFormat" value="${currencyFormatterDB.currencySymbol}" />

<%-- Load the store bundles --%>
<c:if test="${env_inPreview }">
	<c:if test="${not empty cookie.WC_TOOLLOCALE.value }">
		<fmt:setLocale value="${cookie.WC_TOOLLOCALE.value}"/>
	</c:if>
	<c:if test="${empty cookie.WC_TOOLLOCALE.value }">
	<%-- 
		The TOOLLOCALE will be empty if the preview launched from Accelerator 
	--%>
		<fmt:setLocale value="${CommandContext.locale}" />
	</c:if>
	<fmt:setBundle basename="/Widgets_701/Properties/widgettext" var="widgetPreviewText"/>
	<fmt:setBundle basename="com.ibm.commerce.stores.preview.properties.StorePreviewer" var="previewText" />
</c:if>
<fmt:setLocale value="${CommandContext.locale}" />

<c:choose>
	<c:when test="${env_b2bStore}">
		<fmt:setBundle basename="/Widgets_701/Properties/widgettext_B2B" var="widgetText" />
	</c:when>
	<c:otherwise>
		<fmt:setBundle basename="/Widgets_701/Properties/widgettext" var="widgetText" />
	</c:otherwise>
</c:choose>


<%
	if (request.getAttribute("previewContext") == null) {
		request.setAttribute("previewContext", ((CommandContext) request.getAttribute("CommandContext")).getContext(PreviewContext.CONTEXT_NAME));
	}
%>
<c:set var="env_storePreviewLink" value="${!empty previewContext && !empty previewContext.properties['previewToken']}"/>
<c:if test="${empty env_hiddenFieldsList}">
	<c:set var="env_hiddenFieldsList" value="" scope="request"/>
</c:if>

<%-- Constants used by subscriptions products --%>
<c:set var="env_subsFulfillmentFrequencyAttrName" value="fulfillmentFrequency" scope="request"/>
<c:set var="env_subsPaymentFrequencyAttrName" value="paymentFrequency" scope="request"/>
<c:set var="env_subsTimePeriodAttrName" value="timePeriod" scope="request"/>

<c:set var="env_displayListPriceInProductPage" value="true" scope="request"/>

<%-- Since this env file is included at lot of places, make sure that we construct HomePageURLWithLang SEO URL only once --%>
<c:if test = "${empty env_TopCategoriesDisplayURL}">
	<wcf:url var="TopCategoriesDisplayURLTemp" value="TopCategories1" patternName="DmartHomePageURLWithLang">
		<wcf:param name="langId" value="${langId}" />
		<wcf:param name="storeId" value="${storeId}" />
		<wcf:param name="catalogId" value="${catalogId}" />
		<wcf:param name="urlLangId" value="${urlLangId}"/>
		<wcf:param name="homePageName" value="home"/>
	</wcf:url>
	<%-- Put the variable in request scope, so that imported JSP's will find this var --%>
	<c:set var="env_TopCategoriesDisplayURL" value="${TopCategoriesDisplayURLTemp}" scope="request"/>
</c:if>
<c:if test = "${empty env_TopCategoriesDisplayURLHierarchy}">
	<wcf:url var="TopCategoriesDisplayURLTempHierarchy" value="TopCategories1" patternName="DmartHomePageURLWithLangHierarchy">
		<wcf:param name="langId" value="${langId}" />
		<wcf:param name="storeId" value="${storeId}" />
		<wcf:param name="catalogId" value="${catalogId}" />
		<wcf:param name="urlLangId" value="${urlLangId}"/>
	</wcf:url>
	<%-- Put the variable in request scope, so that imported JSP's will find this var --%>
	<c:set var="env_TopCategoriesDisplayURLHierarchy" value="${TopCategoriesDisplayURLTempHierarchy}" scope="request"/>
</c:if>
<%-- Begin pagination control variables definition --%>
<%-- set default pageSize and beginIndex --%>
<c:set var="beginIndex" scope="request"><c:out value="${WCParam.beginIndex}" /> </c:set>
<c:if test="${empty beginIndex}">
	<c:set var="beginIndex" value = "0" scope="request"/>
</c:if>

<c:set var="pageSize" scope="request"><c:out value="${WCParam.pageSize}" /></c:set>
<c:if test="${empty pageSize}">
	<c:set var="pageSize" scope="request"><c:out value="${param.resultsPerPage}" /></c:set>
	<c:if test="${empty pageSize}">
		<c:set var="pageSize" value="12" scope="request"/>
	</c:if>
</c:if>
<c:set var="env_displayRibbonAdInGridMode" value="true" scope="request"/>
<%-- enable/disable to display SKU URL instead of product URL when the product has only one single SKU --%>
<c:set var="env_displaySKUContextData" value="false" scope="request"/>
<%@ include file="SterlingConfiguratorIntegrationSetup.jspf" %>	

<flow:ifEnabled feature="contractSelection">
	<c:set var="env_contractSelection" value="true" scope="request"/>
</flow:ifEnabled>
<flow:ifDisabled feature="contractSelection">
	<c:set var="env_contractSelection" value="false" scope="request"/>
</flow:ifDisabled>

<%-- 
	orgListDisplayType - Controls how the list of organizations are displayed.
	Valid values are dropDown, search, depends.
	1. dropDown - Displays list of organizations in tree structure using select box. Use this option if number of organizaitons is less.
	2. search - Displays search box to allow searching for organizations based on orgName. Use this option if number of organizations is more.
	3. depends - When number of total organizations is < orgListPageSizeBreakPoint then it defaults to dropDown view, else it defaults to search mode.
--%>
<c:set var="orgListDisplayType" value="depends" scope="request"/> 
<c:set var="orgListPageSizeBreakPoint" value="20" scope="request"/>


<c:set var="maxOrderItemsPerPage" value="20"/>
<c:set var="maxOrderItemsToInspect" value="50"/>

<c:set var="profileShippingNickname" value="Default_Shipping_${storeId}"/>
<c:set var="profileBillingNickname" value="Default_Billing_${storeId}"/>

<%-- variables for buy on behalf  --%>
<c:if test="${empty env_shopOnBehalfEnabled and userType ne 'G'}"> 
    <c:set var="env_shopOnBehalfEnabled" value="false"/>
    <c:if test="${env_b2bStore eq true}">
      <c:set var="env_shopOnBehalfSessionEstablished" value="false"/>
      <c:if test="${CommandContext.callerId != CommandContext.forUserId && !empty CommandContext.stickyUserId}">
         <c:set var="env_shopOnBehalfSessionEstablished" value="true"/>
         <c:set var="env_shopOnBehalfEnabled" value="true"/>
         
         <%-- With the run as user set, the user display name cannot be based on the command context's current user--%>
         <c:set var="userLoginCookie" value="WC_LogonUserId_${WCParam.storeId}"/>
         <c:if test="${!empty cookie[userLoginCookie].value}"> 
	     <c:set var="userDisplayName" value="${cookie[userLoginCookie].value}"/>
	     <%
		      String decoded = java.net.URLDecoder.decode((String)pageContext.getAttribute("userDisplayName"), "UTF-8");
		      if(decoded != null){
		        pageContext.setAttribute("userDisplayName", decoded);
		      } 
	    %>
         </c:if>
         
         <c:set var="env_buyOnBehalfAdminUserId" value="${CommandContext.callerId}"/>
         <c:set var="env_buyOnBehalfUserId" value="${CommandContext.forUserId}"/>
      </c:if>
      <c:if test="${env_shopOnBehalfSessionEstablished eq false}">
        <%-- Enable shop on behalf for buyer adminstrators --%>
        <c:set var="userRoles" value="${CommandContext.user.roles}"/>
        <c:if test="${!empty userRoles}">
            <c:forEach items="${userRoles}" var="userRole">
                <c:if test="${userRole eq '-21'}">
                    <c:set var="env_shopOnBehalfEnabled" value="true"/>
                </c:if>
            </c:forEach>
        </c:if>
      </c:if> 
    </c:if>
</c:if>

<%
response.setHeader("X-Frame-Options","SAMEORIGIN");
%>
